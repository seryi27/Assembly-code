;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; SISTEMAS BASADOS EN MICROPROCESADORES. PRACTICA 4
;
; SERGIO CORDERO ROJAS Y ELIAS HERNANDIS PRIETO
; GRUPO 2301
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; CONSTANTES
DIMPOLIBIO EQU 6
INTERR_POLIBIO EQU 57H ; CODIGO DE INTERRUPCION
INTERR_PERIODICA EQU 1CH ; CODIGO DE INTERRUPCION
MARCA EQU 'Cs' ; 20190428

CODIGO SEGMENT
  ASSUME CS:CODIGO
  ORG 256

INICIO:
  JMP MAIN

; VARIABLES GLOBALES
; POLIBIO DB  '4', '5', '6', '7', '8', '9', \
;             'A', 'B', 'C', 'D', 'E', 'F', \
;             'G', 'H', 'I', 'J', 'K', 'L', \
;             'M', 'N', 'O', 'P', 'Q', 'R', \
;             'S', 'T', 'U', 'V', 'W', 'X', \
;             'Y', 'Z', '0', '1', '2', '3'

ALFABETO DB '456789ABCDEFGHIJKLMNOPQRSTUVWXYZ0123'
LUT DB 255 DUP(0, 0)

INSTRUCCIONES DB 'VERSION DE POLIBIO: 7', 0AH, 'SERGIO CORDERO ROJAS Y ELIAS HERNANDIS PRIETO', 0AH, 'EJECUTAR CON /I PARA INSTALAR Y CON /D PARA DESINSTALAR.', 0AH, '$'
MSG_NO_INSTALADA DB 'LA INTERRUPCION NO ESTA INSTALADA', 0AH, '$'
MSG_SI_INSTALADA DB 'LA INTERRUPCION ESTA INSTALADA', 0AH, '$'
MSG_YA_INSTALADA DB 'LA INTERRUPCION YA ESTA INSTALADA. NO SE VOLVERA A INSTALAR.$'
MSG_INTERR_INSTALLADA DB 'LA INTERRUPCION FUE INSTALADA.$'
MSG_INTERR_DESINSTALADA DB 'LA INTERRUPCION FUE DESINSTALADA.$'

CONTADOR DB 0 ; CUENTA EL NÚMERO DE VECES QUE LA INTERRUPCIÓN PERIÓDICA HA SIDO LLAMADA
SIGNAL DB 1 ; SI ESTÁ A UNO, PERMITE LA IMPRESIÓN (PARA QUE SE PUEDA HACER
            ; PERIÓDICA SE PONE A UNO CADA 18 LLAMADAS A LA INTERRUPCIÓN 1CH).
EX DW ?


;;
;; CREAR LA LUT PARA PASAR DE POLIBIO A ASCII
;;
CREARLUT PROC
  PUSH AX BX CX DX SI DI

  MOV AH, 1 ; INDICE EXTERNO LUT
  MOV BX, 0 ; INDICE EXTERNO ALFABETO
  MOV CX, 0 ; INDICE LUT
  BUCLE:
    MOV AL, 1
    MOV SI, 0

    BUCLE2:
      MOV CL, ALFABETO[BX][SI]
      MOV DI, CX
      SAL DI, 1
      MOV LUT[DI], AH
      MOV LUT[DI + 1], AL
      INC AL
      INC SI
      CMP AL, DIMPOLIBIO + 1
      JNZ BUCLE2

    INC AH
    ADD BX, DIMPOLIBIO
    CMP AH, DIMPOLIBIO + 1
    JNZ BUCLE

  POP DI SI DX CX BX AX
  RET
CREARLUT ENDP

; CODIFICA UN STRING EN DS:DX CON EL CÓDIGO POLIBIO
POLIFICACION PROC
  PUSH AX BX CX DI SI BP

  MOV BP, DX ; MOVER EL OFFSET DE LA CADENA A BP PARA PODER DIRECCIONAR

  MOV CX, 0
  MOV DI, 0 ; INDICE DEL CARACTER EN LA TABLA DE ALFABETO
  MOV SI, 0 ; INDICE DEL CARACTER EN LA CADENA
  CADACARACTER:
    MOV CL, DS:BP[SI]
    MOV DI, CX
    SAL DI, 1
    MOV BX, WORD PTR LUT[DI] ; CARGAR LAS COORDENADAS DE POLIBIO EN BH:BL

    ; SI LA SEÑAL NO ESTÁ A UNO, NOS QUEDAREMOS ESPERANDO PARA IMPRIMIR UN CARACTER
    LOOP_IMPRIMIR:
      CMP SIGNAL, 1
      JNE LOOP_IMPRIMIR
      CALL IMPRIMIRCOORDENADAS

      ; SI LA FLAG EX ESTÁ A 1, NO QUEREMOS HACER IMPRESIÓN PERIÓDICA, POR LO
      ; QUE NO VOLVEMOS A PONER LA SEÑAL A 0
      CMP EX, 1
      JE EJERBCOD
      MOV SIGNAL, 0

    EJERBCOD:
    INC SI
    CMP BYTE PTR DS:BP[SI], '$'
    JNZ CADACARACTER

    ; IMPRIMIR UN SALTO DE LINEA
    MOV AH, 02H
    MOV DL, 0AH
    INT 21H

    POP BP SI DI CX BX AX
    RET
POLIFICACION ENDP

; DESCODIFICA UNA CADENA EN FORMATO POLIBIO PASADA POR DS:DX
DESPOLIFICACION PROC
  PUSH AX BX CX DX SI BP

  MOV BP, DX ; MOVER EL OFFSET DE LA CADENA A BP PARA PODER DIRECCIONAR

  CADACOORDENADA:
    MOV AH, 0
    MOV AL, DS:BP ; PRIMERA COORDENADA
    MOV BX, AX

    MOV AL, DS:BP[1] ; SEGUNDA COORDENADA
    MOV SI, AX

    ; CONVERTIR LAS COORDENADAS EN ENTEROS
    SUB BX, '0'
    SUB SI, '0'

    ; CAMBIAR EL INDEXADO PARA QUE EMPIECE EN 0
    DEC BX
    DEC SI

    ; MULTIPLICAR LA PRIMERA COORDENADA (FILAS) POR EL ANCHO DE LA TABLA
    MOV AX, BX
    MOV CH, DIMPOLIBIO
    MUL CH
    MOV BX, AX

    ; OBTENER EL CARACTER QUE REPRESENTA EL PAR DE IMPRIMIRCOORDENADAS
    MOV DL, ALFABETO[BX+SI]

    LOOP_IMPRIMIR_DECOD:
      CMP SIGNAL, 1
      JNE LOOP_IMPRIMIR_DECOD

      ; IMPRIMIR EL CARACTER
      MOV AH, 2
      INT 21H

      CMP EX, 1
      JE EJERBDECOD
      MOV SIGNAL, 0

    EJERBDECOD:
      ; SI ENCONTRAMOS UN CARACTER '$' EN LUGAR DE UNA COORDENADA,
      ; HEMOS LLEGADO AL FINAL DE LA CADENA CODIFICADA
      MOV AL, DS:BP[2]
      CMP AL, '$'
      JZ FIN

      ; AVANZAR EN EL BUCLE
      ADD BP, 3
      JMP CADACOORDENADA

  FIN:
    ; IMPRIMIR UN SALTO DE LINEA
    MOV AH, 02H
    MOV DL, 0AH
    INT 21H

    POP BP SI DX CX BX AX
    RET


DESPOLIFICACION ENDP

;;
;; IMPRIME EL PARA DE COORDENADAS DADO EN BH:BL EN FORMATO ASCII POR PANTALLA
;;
IMPRIMIRCOORDENADAS PROC
  PUSH AX DX

  MOV AH, 2 ; INTERRUPCIÓN PARA IMPRIMIR UN CARACTER

  ; CARGA DE LA PRIMERA COORDENADA, CONVERSIÓN A ASCII E IMPRESIÓN
  MOV DL, BL
  ADD DL, '0'
  INT 21H

  ; CARGA DE LA SEGUNDA COORDENADA, CONVERSIÓN A ASCII E IMPRESIÓN
  MOV DL, BH
  ADD DL, '0'
  INT 21H

  ; IMPRESIÓN DE UN ESPACIO
  MOV DL, ' '
  INT 21H

  POP DX AX
  RET
IMPRIMIRCOORDENADAS ENDP

; RUTINA DE SERVICIO A LA INTERRUPCION
FIRMA DW MARCA
RSI PROC FAR
  STI
  MOV EX, BX
  ; INSTRUCCIONES DE LA RUTINA DE INTERRUPCION
  CMP AH, 10H
  JZ CODIFICAR

  CMP AH, 11
  JZ DECODIFICAR

  FININTERR:
    IRET

  CODIFICAR:
    ; IMPRIMIMOS LA CADENA ALMACENADA EN DS:DX CODIFICADA EN CÓDIGO POLIBIO
    CALL POLIFICACION
    JMP FININTERR

  DECODIFICAR:
    ; IMPRIMIMOS LA CADENA ALMACENADA EN DS:DX DECODIFICADA DE POLIBIO
    CALL DESPOLIFICACION
    JMP FININTERR
RSI ENDP

RSI2 PROC FAR
    INC CONTADOR
    CMP CONTADOR, 18
    JNE FIN_RSI2
    MOV SIGNAL, 1
    MOV CONTADOR, 0
  FIN_RSI2:
    IRET
RSI2 ENDP

INSTALADOR PROC
  CALL CREARLUT

  MOV AX, 0
  MOV ES, AX
  MOV AX, OFFSET RSI
  MOV BX, CS

  CLI
  MOV ES:[INTERR_POLIBIO * 4], AX
  MOV ES:[INTERR_POLIBIO * 4 + 2], BX
  STI

  MOV AX, OFFSET RSI2

  CLI
  MOV ES:[INTERR_PERIODICA * 4], AX
  MOV ES:[INTERR_PERIODICA * 4 + 2], BX
  STI

  MOV DX, OFFSET INSTALADOR
  INT 27H ; ACABA Y DEJA RESIDENTE
          ; PSP, VARIABLES Y RUTINA RSI
INSTALADOR ENDP

DESINSTALADOR PROC
  PUSH AX BX CX DS ES

  MOV CX, 0
  MOV DS, CX
  MOV ES, DS:[INTERR_POLIBIO * 4 + 2]
  MOV BX, ES:[2CH]

  MOV AH, 49H
  INT 21H
  MOV ES, BX
  INT 21H

  MOV ES, DS:[INTERR_PERIODICA * 4 + 2]
  MOV BX, ES:[2CH]

  MOV AH, 49H
  INT 21H
  MOV ES, BX
  INT 21H

  CLI
    MOV DS:[INTERR_POLIBIO * 4], CX
    MOV DS:[INTERR_POLIBIO * 4 + 2], CX
    MOV DS:[INTERR_PERIODICA * 4], CX
    MOV DS:[INTERR_PERIODICA * 4 + 2], CX
  STI

  POP ES DS CX BX AX
  RET
DESINSTALADOR ENDP

; DEVUELVE 0 EN AX SI NUESTRO PROGRAMA RESIDENTE ESTÁ INSTALADO
RSIINSTALADA PROC
  PUSH BX DS ES
  ; CARGAR EN ES:BX LA DIRECCIÓN DE LA PRIMERA INSTRUCCIÓN DE LA RSI
  MOV BX, 0
  MOV DS, BX
  MOV ES, DS:[INTERR_POLIBIO * 4 + 2]
  MOV BX, DS:[INTERR_POLIBIO * 4]

  ; DECREMENTAR BX PARA LLEGAR A LA DIRECCIÓN DE LA MARCA
  SUB BX, 2

  ; COMPROBAR QUE LA MARCA DE LA RSI COINCIDE
  MOV AX, ES:[BX]
  SUB AX, MARCA

  POP ES DS BX
  RET
RSIINSTALADA ENDP

; DEVUELVE UN CARACTER EN AL CON LA FLAG CON LA QUE SE HA EJECUTADO
; EL PROGRAMA.
LEERPARAMETROSENTRADA PROC
  PUSH BX
  ; CALCULAR LA POSICION EN LA QUE SE ENCONTRARÁ LA FLAG
  MOV BX, 81H ; COMIENZO DE LOS PARÁMETROS DE ENTRADA
  ADD BL, DS:80H ; SUMAR LA LONGITUD DE LOS PARÁMETROS DE ENTRADA
  DEC BX ; RESTAR EL RETORNO DE CARRO

  ; CARGAR EN AL EL ÚLTIMO CARACTER QUE ES LA FLAG
  MOV AL, DS:BX
  POP BX
  RET
LEERPARAMETROSENTRADA ENDP

MAIN PROC
  ; LEER ARGUMENTOS POR LINEA DE COMANDOS EN AH
  CALL LEERPARAMETROSENTRADA

  CMP AL, 'I'
  JZ INSTALAR

  CMP AL, 'D'
  JZ DESINSTALAR

  ; SI NOS EJECUTAN SIN ARGUMENTOS, IMPRIMIR INSTRUCCIONES

  ; COMPROBAR EL ESTADO DE INSTALACIÓN DEL PROGRAMA
  CALL RSIINSTALADA
  CMP AX, 0
  JZ IMPRIMIR_SI_INSTALADA

  MOV AH, 09H
  MOV DX, OFFSET MSG_NO_INSTALADA
  JMP CONTINUAR

  IMPRIMIR_SI_INSTALADA:
    MOV AH, 09H
    MOV DX, OFFSET MSG_SI_INSTALADA

  CONTINUAR:
    INT 21H ; IMPRIMIR EL ESTADO DE INSTALACIÓN

    MOV DX, OFFSET INSTRUCCIONES
    INT 21H
    JMP TERMINAR

  INSTALAR:
    ; SI NOS EJECUTAN CON /I, INSTALAR LA INTERRUPCION

    ; COMPROBAR SI YA ESTÁ INSTALADA
    CALL RSIINSTALADA
    CMP AX, 0
    JZ YAESTAINSTALADANOLAINSTALO

    MOV AH, 09H
    MOV DX, OFFSET MSG_INTERR_INSTALLADA
    INT 21H
    CALL INSTALADOR ; ACABA EL PROGRAMA

    YAESTAINSTALADANOLAINSTALO:
      MOV AH, 09H
      MOV DX, OFFSET MSG_YA_INSTALADA
      INT 21H
      JMP TERMINAR

  DESINSTALAR:
    ; SI NOS EJECUTAN CON /D, DESINSTALAR LA INTERRUPCION

    ; SI NO ESTA INSTALADA, NO LA DESINSTALAMOS
    CALL RSIINSTALADA
    CMP AX, 0
    JNZ NOESTAINSTALADANOLADESINSTALO

    MOV AH, 09H
    MOV DX, OFFSET MSG_INTERR_DESINSTALADA
    INT 21H
    CALL DESINSTALADOR
    JMP TERMINAR

    NOESTAINSTALADANOLADESINSTALO:
      MOV AH, 09H
      MOV DX, OFFSET MSG_NO_INSTALADA
      INT 21H

  TERMINAR:
    ; FIN DEL PROGRAMA
    MOV AX, 4C00H
    INT 21H
MAIN ENDP

CODIGO ENDS
END INICIO ; FIN DEL PROGRAMA. COMENZAR EJECUCION EN INICIO
